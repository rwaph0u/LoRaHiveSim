const STRINGS = {
  en: {
    appTitle: "LoRaHiveSim",
    Language: "Language",
    palette: "Palette",
    addHive: "+ Hive",
    addObstacle: "+ Obstacle",
    focusServer: "Focus server",
    measure: "Measure distance",
    measureHint: "Click two nodes/points on the canvas to measure. ESC to cancel.",
    obstacleContext: "Obstacle (context)",
    obstacleContextHint: "No obstacle selected → these settings will be used when adding a new obstacle.",
    radiusDefault: "Radius (default)",
    lossDefault: "Loss (default)",
    radiusSelected: "Radius (selected)",
    lossSelected: "Loss (selected)",
    deleteSelection: "Delete selection",
    resetAll: "Reset all",
    copyShareLink: "Copy share link",
    loadFromUrl: "Load from URL",
    panZoomHint: "Space/Right/Middle = pan • Wheel = zoom",
    loraParams: "LoRa Parameters (global)",
    loraHint: "These parameters adjust range and sensitivity. Visual wave radius follows realistic range when enabled.",
    mpp: "Meters / pixel",
    realistic: "Realistic path-loss",
    freqMHz: "Freq (MHz)",
    txDbm: "TX power (dBm)",
    selection: "Selection",
    noSelection: "— Click a hive or obstacle on the canvas to select —",
    type: "Type",
    typeHive: "Hive",
    txPower: "TX Power (visual)",
    txHint: "This visual TX scales wave alpha; dBm is used when Realistic mode is ON.",
    stats: "Stats",
    resetStats: "Reset stats",
    logs: "Logs",
    debug: "Debug",
    state: "State",
    importExport: "📦 Import / Export",
    exportFile: "Export JSON (file)",
    exportToZone: "Export → area",
    copyExport: "Copy export",
    importFile: "Import JSON (file)",
    importHint: "Tolerant import: unknown properties ignored, invalid values corrected.",
    exportAreaTitle: "Export Area (read-only)",
    importAreaTitle: "Import Area (paste JSON)",
    importFromArea: "Import from area",
    clear: "Clear",
    minimapTitle: "Mini-map (click/drag to navigate)",
    hintOverlay: "Space / right / middle click: pan — Wheel: zoom",
    geoTitle: "🌍 Geo Import (experimental)",
    originLat: "Origin lat",
    originLon: "Origin lon",
    metersPerPx: "Meters per pixel",
    geoOptimize: "Optimize large files",
    geoTolerance: "Simplify tolerance (m)",
    geoProcessing: "Processing GeoJSON...",
    geoHint: "Paste GeoJSON (Polygons/Points). Large files will be processed asynchronously with automatic simplification. Points become hives or server if name='server'. Polygons auto-detect materials from OSM tags.",
    loadGeo: "Load GeoJSON",
  },
  fr: {
    appTitle: "LoRaHiveSim",
    Language: "Langue",
    palette: "Palette",
    addHive: "+ Rucher",
    addObstacle: "+ Obstacle",
    focusServer: "Focus serveur",
    measure: "Mesurer une distance",
    measureHint: "Clique deux nœuds/points sur le canvas pour mesurer. Échap pour annuler.",
    obstacleContext: "Obstacle (contexte)",
    obstacleContextHint: "Aucun obstacle sélectionné → ces réglages seront utilisés lors de l’ajout d’un nouvel obstacle.",
    radiusDefault: "Rayon (défaut)",
    lossDefault: "Perte (défaut)",
    radiusSelected: "Rayon (sélection)",
    lossSelected: "Perte (sélection)",
    deleteSelection: "Supprimer la sélection",
    resetAll: "Reset total",
    copyShareLink: "Copier lien de partage",
    loadFromUrl: "Charger depuis l’URL",
    panZoomHint: "Espace/Droit/Milieu = pan • Molette = zoom",
    loraParams: "Paramètres LoRa (globaux)",
    loraHint: "Ces paramètres ajustent la portée et la sensibilité. Le rayon visuel suit la portée réaliste si activé.",
    mpp: "Mètres / pixel",
    realistic: "Modèle réaliste de perte",
    freqMHz: "Fréquence (MHz)",
    txDbm: "Puissance TX (dBm)",
    selection: "Sélection",
    noSelection: "— Cliquez un rucher ou un obstacle sur le canvas pour sélectionner —",
    type: "Type",
    typeHive: "Rucher",
    txPower: "Puissance visuelle",
    txHint: "Cette puissance agit sur l'alpha visuel; le dBm est utilisé si le mode réaliste est activé.",
    stats: "Stats",
    resetStats: "Reset stats",
    logs: "Logs",
    debug: "Debug",
    state: "État",
    importExport: "📦 Import / Export",
    exportFile: "Exporter JSON (fichier)",
    exportToZone: "Exporter → zone",
    copyExport: "Copier export",
    importFile: "Importer JSON (fichier)",
    importHint: "Import tolérant : propriétés inconnues ignorées, valeurs invalides corrigées.",
    exportAreaTitle: "Zone Export (lecture seule)",
    importAreaTitle: "Zone Import (coller JSON)",
    importFromArea: "Importer depuis zone",
    clear: "Vider",
    minimapTitle: "Mini-map (clic/drag pour naviguer)",
    hintOverlay: "Espace / clic droit / clic milieu : pan — Molette : zoom",
    geoTitle: "🌍 Import Geo (expérimental)",
    originLat: "Latitude origine",
    originLon: "Longitude origine",
    metersPerPx: "Mètres par pixel",
    geoHint: "Colle un GeoJSON simple (Polygones/Points). Les points deviennent ruchers (ou serveur si name='server'). Les polygones deviennent des obstacles avec 'loss' [0..0.95].",
    loadGeo: "Charger GeoJSON",
    geoOptimize: "Optimiser géométries",
    geoTolerance: "Tolérance simplification",
    geoProcessing: "Traitement en cours...",
  }
};
function detectDefaultLang(){
  const nav = navigator.language || navigator.userLanguage || "en";
  return nav.toLowerCase().startsWith("fr") ? "fr" : "en";
}
function applyI18n(lang){
  const dict = STRINGS[lang] || STRINGS.en;
  document.querySelectorAll("[data-i18n]").forEach(el => {
    const key = el.getAttribute("data-i18n");
    if (dict[key]) el.textContent = dict[key];
  });
  document.getElementById("appTitle").childNodes[0].textContent = dict.appTitle + " ";
}
